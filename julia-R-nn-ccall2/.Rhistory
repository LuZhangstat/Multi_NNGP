install.packages("MODIS")
library("MODIS")
library("rgdal")
library("rgdal")
EarthdataLogin(usr = "LuZhangstat", pwd = "Lu2h@ng2816")
c <- getHdf(product =  "M.D11A1", begin = "2016306",
end = "2016335",extent = "Luxembourg")
ls_name_c = getSds(c)
c
4396 + 2
4398/60
4398/3600
4398/60
16377 +44491
60868 / 60
1014/73
2*5000
2*5000/60
51 - 14
library("Rcpp")
installed.packages()
?union
#
setwd("/home/lu/Documents/Github/Multi_NNGP/RDA/data/rawdata")
#MyData <- read.csv(file="GFB_Abm_ba_USA_10192017.csv", header=TRUE, sep=",")
#install.packages("data.table")
library("data.table")
#t <- proc.time()
#data <- fread('GFB_Abm_ba_USA_10192017.csv', header = T)
#proc.time() - t
#summary(data$Ps)
#summary(data$Yr)
#summary(data$B)
rm(list = ls())
library("MODIS")
library("rgdal")
load("hold_index.RData")
U = intersect(hold_ind1, hold_ind2, hold_ind3)
U = intersect(intersect(intersect(hold_ind1, hold_ind2), hold_ind3), hold_ind4)
U
0.1^10*4500000
load("cleaned_data.RData")
N = dim(data_cleaned)[1]
U = intersect(intersect(intersect(intersect(hold_ind1, hold_ind2),
hold_ind3), hold_ind4), hold_ind5)
U = intersect(intersect(intersect(intersect(hold_ind1, hold_ind2),
hold_ind3), hold_ind4), hold_ind5)
U = intersect(intersect(intersect(intersect(intersect(U, hold_ind6), hold_ind7),
hold_ind8), hold_ind9), hold_ind10)
length(U)
U = intersect(intersect(intersect(intersect(intersect(intersect(intersect(
intersect(intersect(hold_ind1, hold_ind2),  hold_ind3), hold_ind4),
hold_ind5), hold_ind6), hold_ind7), hold_ind8), hold_ind9), hold_ind10)
length(U)
setwd("/home/lu/Documents/Github/Multi_NNGP/julia-R-nn-ccall2")
rm(list=ls())
dyn.load("nn.so")
#load("../RDA/data/raw_data.RData")
#coords <- cbind(raw_data$scaled_x[!is.na(raw_data$NDVI)],
#                raw_data$scaled_y[!is.na(raw_data$NDVI)])
set.seed(1)
n <- 100
coords <- cbind(runif(n, 0, 1), runif(n, 0, 1))
write.csv(coords, "coords.csv", row.names=FALSE)
#n <- nrow(coords)
m <- 10
nThreads <- 4
nIndx <- (1+m)/2*m+(n-m-1)*m
nnIndx <- rep(0, nIndx)
nnDist <- rep(0, nIndx)
##first of nnIndxLU column holds the nnIndx index for the i-th location and the second columns holds the number of neighbors the i-th location has (the second column is a bit of a waste but simplifies my life in the spNNGP).
nnIndxLU <- matrix(0, n, 2)
#out <- .C("mkNNIndx", as.integer(n), as.integer(m), as.double(coords), as.integer(nnIndx), as.double(nnDist), as.integer(nnIndxLU), DUP=FALSE)
t <- proc.time()
outCB <- .C("mkNNIndxCB", as.integer(n), as.integer(m), as.double(coords),
as.integer(nnIndx), as.double(nnDist), as.integer(nnIndxLU),
as.integer(nThreads), DUP=FALSE)
proc.time() - t
##some plots to check
source("utils.R")
n.indx <- mk.n.indx.list(outCB[[4]], n, m)
for(i in 30:35){
plot(coords[1:i, ], cex=2, xlab="Easting", ylab="Northing")
abline(v=coords[i,1,drop=FALSE], lty=3, lwd=2)
points(coords[i,,drop=FALSE], col="blue", pch=19, cex=2)
points(coords[n.indx[[i]],,drop=FALSE], col="red", pch=19, cex=2)
readline(prompt = "Pause. Press <Enter> to continue...")
}
